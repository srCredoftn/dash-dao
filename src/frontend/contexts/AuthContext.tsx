import {
  createContext,
  useContext,
  useState,
  useEffect,
  useMemo,
  useCallback,
  ReactNode,
} from "react";
/**
 * Contexte d‚Äôauthentification
 * R√¥le: exposer l‚Äô√©tat utilisateur (user), les actions (login/logout) et des aides (r√¥les).
 * Persistance: par onglet via auth-storage, avec v√©rification serveur.
 */
import { authService } from "@/services/authService";
import "@/utils/auth-cleanup"; // Outils de nettoyage/d√©bogage auth (sans effet en prod)
import type { AuthUser, LoginCredentials, UserRole } from "@shared/dao";
import { devLog } from "@/utils/devLogger";

interface AuthContextType {
  user: AuthUser | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  logout: () => Promise<void>;
  hasRole: (roles: UserRole[]) => boolean;
  isAdmin: () => boolean;
  canEdit: () => boolean;
}

// Contexte interne (undefined hors Provider pour rep√©rer un usage invalide)
const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    devLog.error("useAuth appel√© en dehors d‚ÄôAuthProvider");
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  // √âtat utilisateur courant (null si non authentifi√©)
  const [user, setUser] = useState<AuthUser | null>(null);
  // Indique si une op√©ration d‚Äôinitialisation/auth est en cours
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = authService.onAuthCleared(() => {
      setUser(null);
      setIsLoading(false);
    });
    return unsubscribe;
  }, []);

  // Au montage: tentative de restauration de session
  useEffect(() => {
    initializeAuth();
  }, []);

  // Routine d‚Äôinitialisation: restaure depuis le stockage puis v√©rifie aupr√®s du serveur
  const initializeAuth = async () => {
    /*
      √âtapes principales:
      1) R√©cup√©rer les donn√©es locales (user + token) pour un d√©marrage rapide (UX)
      2) V√©rifier un bootId serveur pour invalider les sessions obsol√®tes apr√®s red√©ploiement
      3) Interroger le serveur pour valider le token et r√©cup√©rer l'utilisateur courant
      4) En cas d'erreur r√©seau, conserver l'utilisateur en cache et retenter plus tard
      5) En cas de jeton invalide, purger proprement les donn√©es locales

      Les devLogs entourent chaque √©tape pour faciliter le debug en environnement dev.
    */
    try {
      setIsLoading(true);

      // 1) Lecture des infos stock√©es localement (par onglet)
      const storedUser = authService.getStoredUser();
      const token = authService.getToken();

      devLog.log("üîÑ Initialisation de l‚Äôauth...");
      devLog.log("üì¶ Utilisateur stock√©:", storedUser?.email || "aucun");
      devLog.log("üîë Jeton pr√©sent:", !!token);

      if (storedUser && token) {
        try {
          // 2) V√©rification de coh√©rence du boot c√¥t√© serveur pour √©viter les jetons p√©rim√©s entre red√©ploiements
          devLog.log(
            "‚úÖ V√©rification du bootId c√¥t√© serveur avant la v√©rification du jeton...",
          );
          const BOOT_KEY = "boot_id_v1";
          try {
            const bootRes = await fetch("/api/boot", {
              headers: { Accept: "application/json" },
            });
            if (bootRes.ok) {
              const bootData: { bootId?: string } = await bootRes.json();
              const serverBootId = String(bootData.bootId || "dev");
              const storedBootId = localStorage.getItem(BOOT_KEY);
              // Si le bootId diff√®re, purge locale pour forcer une reconnexion propre
              if (!storedBootId || storedBootId !== serverBootId) {
                devLog.info(
                  "üîÑ BootId diff√©rent ‚Äî purge des donn√©es locales pour √©viter une v√©rification invalide",
                );
                authService.clearAuth();
                localStorage.setItem(BOOT_KEY, serverBootId);
                setUser(null);
                setIsLoading(false);
                return;
              }
            } else {
              devLog.warn(
                "‚ö†Ô∏è L‚Äôendpoint /boot n‚Äôa pas r√©pondu OK ‚Äî on poursuit la v√©rification du jeton",
              );
            }
          } catch (bootErr) {
            // Erreur r√©seau sur /boot: on continue (d‚Äôautres garde-fous suivent)
            devLog.warn(
              "‚ö†Ô∏è √âchec de la v√©rification du boot ‚Äî poursuite avec la v√©rification du jeton:",
              bootErr,
            );
          }

          // 3) V√©rification serveur du jeton (source de v√©rit√©)
          devLog.log("‚úÖ V√©rification du jeton aupr√®s du serveur...");
          const currentUser = await authService.getCurrentUser();
          // Si succ√®s: mettre √† jour l'√©tat courant avec l'utilisateur renvoy√© par le serveur
          setUser(currentUser);
          devLog.log(
            "üîÑ Auth restaur√©e depuis le stockage:",
            currentUser.email,
          );
        } catch (error) {
          // Diff√©rencier les erreurs r√©seau des √©checs d‚Äôauthentification
          const errorMessage =
            error instanceof Error ? error.message : "Erreur inconnue";

          if (
            errorMessage.includes("connexion") ||
            errorMessage.includes("r√©seau") ||
            errorMessage.includes("serveur") ||
            errorMessage.includes("trop de tentatives")
          ) {
            // R√©seau instable: conserver l‚Äôutilisateur en cache et retenter plus tard
            devLog.warn(
              "üåê Probl√®me r√©seau/limitation durant la v√©rification:",
              errorMessage,
            );
            // On affiche temporairement l'utilisateur stock√© pour ne pas briser l'UX
            setUser(storedUser);
            devLog.log(
              "‚ö†Ô∏è Utilisation de l‚Äôutilisateur en cache, nouvelle tentative planifi√©e",
            );
            // Re-v√©rification programm√©e (temporisation progressive simple)
            setTimeout(() => {
              devLog.log("üîÑ Nouvelle tentative de v√©rification auth...");
              initializeAuth();
            }, 30000);
          } else {
            // Jeton invalide: purge et retour √† l‚Äô√©cran de connexion
            devLog.warn("‚ö†Ô∏è √âchec de v√©rification d‚Äôauth:", errorMessage);
            devLog.log("üßπ Nettoyage des donn√©es d‚Äôauth invalides...");
            authService.clearAuth();
            setUser(null);
          }
        }
      } else {
        // Aucun utilisateur stock√©: s‚Äôassurer que les traces partielles sont effac√©es
        devLog.log("‚ÑπÔ∏è Aucun identifiant stock√©");
        authService.clearAuth();
        setUser(null);
      }
    } catch (error) {
      // Erreur inattendue: garantir un √©tat propre
      devLog.error("‚ùå √âchec d‚Äôinitialisation de l‚Äôauth:", error);
      authService.clearAuth();
      setUser(null);
    } finally {
      setIsLoading(false);
      devLog.log("‚úÖ Initialisation de l‚Äôauth termin√©e");
    }
  };

  /*
    Action: connexion utilisateur
    - Appelle authService.login qui effectue la requ√™te /api/auth/login
    - Met √† jour l'√©tat utilisateur et signale l'ach√®vement via devLog
    - Les erreurs sont propag√©es pour √™tre affich√©es c√¥t√© composant appelant
  */
  const login = useCallback(async (credentials: LoginCredentials) => {
    try {
      setIsLoading(true);
      const response = await authService.login(credentials);
      setUser(response.user);
      devLog.log("‚úÖ Connexion r√©ussie:", response.user.email);
    } catch (error) {
      devLog.error("Connexion √©chou√©e:", error);
      // Propager l‚Äôerreur pour affichage c√¥t√© UI
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  /*
    Action: d√©connexion
    - Appelle authService.logout qui supprime le token c√¥t√© serveur et/ou c√¥t√© client
    - R√©initialise l'√©tat utilisateur local pour refl√©ter la d√©connexion
    - Les erreurs sont simplement logg√©es; l'√©tat local est nettoy√© quel que soit le r√©sultat
  */
  const logout = useCallback(async () => {
    try {
      setIsLoading(true);
      await authService.logout();
      setUser(null);
      devLog.log("‚úÖ D√©connexion r√©ussie");
    } catch (error) {
      devLog.error("D√©connexion √©chou√©e:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Aide: v√©rifie la pr√©sence d‚Äôau moins un r√¥le donn√©
  const hasRole = useCallback(
    (roles: UserRole[]): boolean => {
      return user ? roles.includes(user.role) : false;
    },
    [user],
  );

  // Raccourci: administrateur ?
  const isAdmin = useCallback((): boolean => {
    return user?.role === "admin";
  }, [user]);

  // Peut √©diter (admin et user)
  const canEdit = useCallback((): boolean => {
    return hasRole(["admin", "user"]);
  }, [hasRole]);

  // Valeur de contexte m√©mo√Øs√©e
  const value: AuthContextType = useMemo(
    () => ({
      user,
      isLoading,
      isAuthenticated: !!user,
      login,
      logout,
      hasRole,
      isAdmin,
      canEdit,
    }),
    [user, isLoading, login, logout, hasRole, isAdmin, canEdit],
  );

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}
